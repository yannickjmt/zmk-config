#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define ENC2 1
#define ENC3 2
#define FNC  3
#define NUM  4
#define NAV  5
#define UNI  6
#define OSL  7
#define PTAB LG(LA(LEFT))
#define NTAB LG(LA(RIGHT))
#define NWIN LA(TAB)
#define PWIN LS(LA(TAB))
// #define XSLV LA(LC(V))
#define DESK1 LC(N1)
#define DESK2 LC(N2)
#define DESK3 LC(N3)
#define DESK4 LC(N4)
#define MHOME LG(LEFT)
#define MEND LG(RIGHT)
#define NXTWO LG(G)
#define PSCRN LG(LS(N4))
#define SUBL0 LC(LA(L))
#define SUBL1 LC(LA(R))

#define LR_DOWN LA(DOWN)
#define LR_UP LA(UP)
#define LR_ZOOM_IN LC(LS(EQUAL))
#define LR_ZOOM_OUT LC(LS(MINUS))
#define IDENT_LEFT LG(LEFT_BRACKET)
#define IDENT_RIGHT LG(RIGHT_BRACKET)
#define MOVE_TEXT_LEFT LC(LA(K))
#define MOVE_TEXT_RIGHT LC(LA(L))

&left_encoder { resolution = <2>; };
&right_encoder { resolution = <2>; };

&sk { release-after-ms = <1000>; };
&sl { release-after-ms = <1000>; };

/ {

  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
        if-layers = <4 5>;
        then-layer = <6>;
    };
  };

	behaviors {
		hm: homerow_mods {
	    compatible = "zmk,behavior-hold-tap";
	    label = "homerow mods";
	    #binding-cells = <2>;
	    tapping_term_ms = <220>;
	    flavor = "balanced";
	    bindings = <&kp>, <&kp>;
	  };

	  mx: layer_tap_osl {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_TAP_OSL";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping_term_ms = <200>;
			bindings = <&mo>, <&sl>;
		};

//		l_e_aig: l_e_aig {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_é";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp N0>, <&kp E>, <&kp N9>, <&kp RET>;
//		};
//
//		l_e_grv: l_e_grv {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_è";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp N0>, <&kp E>, <&kp N8>, <&kp RET>;
//		};
//
//		l_e_crc: l_e_crc {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_ê";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp N0>, <&kp E>, <&kp A>, <&kp RET>;
//		};
//
//		l_e_trm: l_e_trm {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_ë";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp N0>, <&kp E>, <&kp B>, <&kp RET>;
//		};
//
//		l_a_grv: l_a_grv {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_à";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp N0>, <&kp E>, <&kp N0>, <&kp RET>;
//		};
//
//		l_a_crc: l_a_crc {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_â";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp N0>, <&kp E>, <&kp N2>, <&kp RET>;
//		};
//
//		l_c_cdl: l_c_cdl {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_ç";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp N0>, <&kp E>, <&kp N7>, <&kp RET>;
//		};
//
//		l_c_eur: l_c_eur {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_€";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N2>, <&kp N0>, <&kp A>, <&kp C>, <&kp RET>;
//		};
//
//		l_c_bht: l_c_bht {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_฿";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp E>, <&kp N3>, <&kp F>, <&kp RET>;
//		};
//
//		l_u_grv: l_u_grv {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_ù";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp N0>, <&kp F>, <&kp N9>, <&kp RET>;
//		};
//
//		l_o_crc: l_o_crc {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_ô";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp N0>, <&kp F>, <&kp N4>, <&kp RET>;
//		};
//
//		l_deg: l_deg {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_°";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp N0>, <&kp B>, <&kp N0>, <&kp RET>;
//		};
//
//		l_mu: l_mu {
//			compatible = "zmk,behavior-macro";
//			label = "LINUX_mu";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp LC(LS(U))>, <&kp N0>, <&kp N0>, <&kp B>, <&kp N5>, <&kp RET>;
//		};
//
//		w_e_aig: w_e_aig {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_é";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp N0>, <&kp E>, <&kp N9>, <&kp RET>;
//		};
//
//		w_e_grv: w_e_grv {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_è";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp N0>, <&kp E>, <&kp N8>, <&kp RET>;
//		};
//
//		w_e_crc: w_e_crc {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_ê";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp N0>, <&kp E>, <&kp A>, <&kp RET>;
//		};
//
//		w_e_trm: w_e_trm {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_ë";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp N0>, <&kp E>, <&kp B>, <&kp RET>;
//		};
//
//		w_a_grv: w_a_grv {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_à";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp N0>, <&kp E>, <&kp N0>, <&kp RET>;
//		};
//
//		w_a_crc: w_a_crc {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_â";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp N0>, <&kp E>, <&kp N0>, <&kp RET>;
//		};
//
//		w_c_cdl: w_c_cdl {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_ç";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp N0>, <&kp E>, <&kp N7>, <&kp RET>;
//		};
//
//		w_c_eur: w_c_eur {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_€";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N2>, <&kp N0>, <&kp A>, <&kp C>, <&kp RET>;
//		};
//
//		w_c_bht: w_c_bht {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_฿";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp E>, <&kp N3>, <&kp F>, <&kp RET>;
//		};
//
//		w_u_grv: w_u_grv {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_ù";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp N0>, <&kp F>, <&kp N9>, <&kp RET>;
//		};
//
//		w_o_crc: w_o_crc {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_ô";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp N0>, <&kp F>, <&kp N4>, <&kp RET>;
//		};
//
//		w_mu: w_mu {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_mu";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp N0>, <&kp B>, <&kp N5>, <&kp RET>;
//		};
//
//		w_deg: w_deg {
//			compatible = "zmk,behavior-macro";
//			label = "WIN_°";
//			#binding-cells = <0>;
//			sleep = <1>;
//			bindings = <&kp RA(U)>, <&kp N0>, <&kp N0>, <&kp B>, <&kp N0>, <&kp RET>;
//		};
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   | bksp |
// | TAB/FN|  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   '   |ent/fn|
// | SHIFT |  Z  |  X  |  C   |  V   |  B   | ---     |  ctrl   |  |   ctrl  |  blank  |  N   |  M    |  ,    |  .   |   /   |shft/;|
//                     | ENC  |Opt/En| Cmd  |  Nav    |   del   |  |   bksp  |  num    | spc  | Ctl   | ENC2  |
// encoder : volume up/down //// ctrl left/ ctrl right
			bindings = <
	&kp ESC     &kp Q       &kp W &kp E &kp R &kp T                                            &kp Y &kp U  &kp I     &kp O   &kp P         &kp BSPC
	&lt FNC TAB &hm LSHFT A &kp S &kp D &kp F &kp G                                            &kp H &kp J  &kp K     &kp L   &hm RSHFT SQT &lt FNC RET
	&kp LSHFT   &kp Z       &kp X &kp C &kp V &kp B &none   &kp LCTRL         &kp RCTRL &none  &kp N &kp M  &kp COMMA &kp DOT &kp FSLH      &mt RSHFT SEMI
	              &tog ENC2 &mt LALT RET  &kp LGUI &mx NAV OSL &kp DEL            &kp BKSP &mo NUM &kp SPC &kp LCTRL &sl OSL
			>;

			sensor-bindings = <&inc_dec_cp C_VOL_DN C_VOL_UP &inc_dec_kp LC(LEFT) LC(RIGHT)>;
		};

		enc1_useless_layer {
			bindings = <
	&trans &trans &trans &trans &trans &trans                              &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans                              &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans &trans &trans  &trans &trans &trans &trans &trans &trans &trans &trans
	                       &tog ENC3  &trans   &trans        &trans &trans  &trans &trans    &trans    &kp LALT     &tog ENC2
			>;
			// encoder : tab / shift tab |||| ctrl left/ ctrl right
			sensor-bindings = <&inc_dec_kp LS(TAB) TAB &inc_dec_kp LC(LEFT) LC(RIGHT)>;
		};

		enc2_lightroom_layer {
			bindings = <
	&trans &trans &trans &trans &trans &trans                              &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans                              &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans &trans &trans  &trans &trans &trans &trans &trans &trans &trans &trans
	                       &kp LGUI  &trans   &trans        &trans &trans  &trans &trans    &trans    &trans     &tog ENC3
			>;
			// encoder lightroom cursor |||| lightroom zoom in and out
			sensor-bindings = <&inc_dec_kp LR_DOWN LR_UP &inc_dec_cp LR_ZOOM_OUT LR_ZOOM_IN>;
		};

		function_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// | none  |  F2 | mute| V+   | stp  |   @  |                                       | F12  |  F7   |  F8   |  F9  | Print| none |
// | none  | caps| Prev| V-   | Next |   @p |                                       | F11  |  F4   |  F5   |  F6  | Ins  | none |
// | none  | /Ble| Ble0| Ble1 | Ble2 | Ble3 |  Ble4  |  ---    |  |   ---   |  ---  | F10  |  F1   |  F2   |  F3  | ---  | none |
//                     | ---  | ---  | ---  |  ---   |  ---    |  |   ---   |  ---  | ---  | ---   | ---   |
// encoder : volume up/down //// brightness up/down

			bindings = <
	&trans &kp F2     &kp C_MUTE   &kp C_VOL_UP &kp C_STOP   &none                                                &kp F12 &kp F7 &kp F8 &kp F9 &kp PSCRN &trans
	&trans &kp CAPS   &kp C_PREV   &kp C_VOL_DN &kp C_NEXT   &none                                                &kp F11 &kp F4 &kp F5 &kp F6 &kp INS  &trans
	&trans &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &out OUT_TOG  &none  &none &kp F10 &kp F1 &kp F2 &kp F3 &trans   &trans
	                         &trans        &trans        &trans           &trans       &trans        &trans &trans &trans &trans &trans
			>;

			sensor-bindings = <&inc_dec_cp C_VOL_DN C_VOL_UP &inc_dec_cp C_BRI_DN C_BRI_UP>;
		};

		num_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// | `     |  !  |  +  |  [   |  ]   |  =   |                                          |  %   |  7    |  8    |  9   |   *   | /    |
// | #     |  @  |  _  |  (   |  )   |  -   |                                          |  $   |  4    |  5    |  6   |   +   | ---  |
// | ~     |  \  |  &  |  {   |  }   |  |   |   ---   |  ---    |  |   ---   |  ---    |  ^   |  1    |  2    |  3   |   -   | ---  |
//                     | ENC  | ---  | ---  |   ---   |  ---    |  |   ---   |  ---    |  0   |  .    | ---   |
// encoder :  identation left right || hard to reach

			bindings = <
	&kp GRAVE &kp EXCL &kp PLUS  &kp LBKT &kp RBKT &kp EQUAL                             &kp CARET &kp N7 &kp N8 &kp N9 &kp KP_MULTIPLY &kp KP_DIVIDE
	&kp HASH  &kp AT   &kp UNDER &kp LPAR &kp RPAR &kp MINUS                             &kp PRCNT &kp N4 &kp N5 &kp N6 &kp KP_PLUS &none
	&kp TILDE &kp BSLH &kp AMPS  &kp LBRC &kp RBRC &kp PIPE &trans &trans  &trans &trans &kp DLLR  &kp N1 &kp N2 &kp N3 &kp KP_MINUS &trans
	                       &trans  &trans   &trans          &trans &trans  &trans &trans    &kp N0  &kp DOT    &trans
			>;

			sensor-bindings = <&inc_dec_kp IDENT_LEFT IDENT_RIGHT>;
		};

		nav_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// | ---  | Tab-| Tab+| win+ | win- | ---  |                                          | Pgup | Home |  Up   | End  | ScrUp | ---  |
// | ---  | Ctrl| Shft| alt  | cmd  | ---  |                                          | Pgdw | Left |  Down | Right| ScrDn | ---  |
// | ---  | --- |subl0| nextw|subl1 | ---  |   ---   |  ---    |  |   ---   |  ---    |      | desk1| desk2 | desk3| desk4 |---   |
//                    | ENC  | ---  | ---  |   ---   |  ---    |  |   ---   |  ---    | ---  | ---  | ---   |
// encoder :  hard to reach || move text left right

			bindings = <
	&trans &kp PTAB  &kp NTAB  &kp PWIN &kp NWIN  &trans                                &kp PG_UP &kp MHOME &kp UP   &kp MEND   &kp K_SCROLL_UP &trans
	&trans &kp LCTRL &kp LSHFT &kp LALT &kp LGUI  &trans                                &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp K_SCROLL_DOWN &trans
	&trans &trans   &kp SUBL0  &kp NXTWO &kp SUBL1 &trans &trans &trans  &trans &trans  &trans   &kp DESK1 &kp DESK2 &kp DESK3 &kp DESK4 &trans
	                       &trans  &trans   &trans        &trans &trans  &trans &trans    &trans    &none     &trans
			>;

			sensor-bindings = <&inc_dec_cp C_VOL_DN C_VOL_UP &inc_dec_kp MOVE_TEXT_LEFT MOVE_TEXT_RIGHT>;
		};

// ---------------------------------------------------------------------------------------------------------------------------------
// | *** |  â  |  é  |  è  |  €  | *** |                           | *** |  ù  | *** |  ô  |  °  | *** |
// | *** |  à  |  ê  |  ë  | *** | *** |                           | *** | *** | *** | *** | *** | *** |
// | *** | *** | *** |  ç  | *** |  ฿  | ***  | *** |  | *** | *** | *** |  µ  | *** | *** | *** | *** |
//                   | *** | *** | *** | ***  | *** |  | *** | *** | *** | *** | *** |
//		unicode_layer_linux {
//			bindings = <
//	&none &l_a_crc &l_e_aig &l_e_grv &l_c_eur &none                             &kp Y &l_u_grv &none &l_o_crc &l_deg &none
//	&none &l_a_grv &l_e_crc &l_e_trm &none    &none                             &none &none    &none &none    &none &none
//	&none &none    &none    &l_c_cdl &none    &l_c_bht &none &none  &none &none &none &l_mu    &none &none    &none &none
//	                       &none  &none   &none        &none &none  &none &none    &none    &none     &none
//			>;
//
//		};
//		unicode_layer_windows {
//			bindings = <
//	&none &w_a_crc &w_e_aig &w_e_grv &w_c_eur &none                             &kp Y &w_u_grv &none &w_o_crc &w_deg &none
//	&none &w_a_grv &w_e_crc &w_e_trm &none    &none                             &none &none    &none &none    &none &none
//	&none &none    &none    &w_c_cdl &none    &w_c_bht &none &none  &none &none &none &w_mu    &none &none    &none &none
//	                       &none  &none   &none        &none &none  &none &none    &none    &none     &none
//			>;
//
//		};

		unicode_layer {
			bindings = <
	&trans &trans &trans &trans &trans &kp B                              &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans                              &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans &trans &trans  &trans &trans &trans &trans &trans &trans &trans &trans
	                       &trans  &trans   &trans        &trans &trans  &trans &trans    &trans    &trans     &trans
			>;
		};

		osl_layer {
			bindings = <
	&trans &trans   &trans    &trans   &trans    &trans                              &trans &trans &trans &trans &trans &trans
	&trans &sk LGUI &sk LSHFT &sk LALT &sk LCTRL &sk K_APP                           &trans &trans &trans &trans &trans &trans
	&trans &trans   &trans    &trans   &trans    &trans &trans &trans  &trans &trans &trans &trans &trans &trans &trans &trans
	                       &trans  &trans   &trans        &trans &trans  &trans &trans    &trans    &trans     &trans
			>;
		};
	};
};
